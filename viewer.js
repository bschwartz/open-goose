// Generated by CoffeeScript 1.6.3
(function() {
  $(document).ready(function() {
    window.loadClickHandlers = function() {
      return window.load(function() {
        readFolderHandler();
        readFileHandler();
        return breadcrumbHandler();
      });
    };
    window.readFolderHandler = function() {
      return $('li.folder').click(function(e) {
        var path;
        path = $(this).find('a').attr('data-path');
        renderFolder(path);
        return updateState(path);
      });
    };
    window.readFileHandler = function() {
      return $('li.file').click(function(e) {
        var path;
        path = $(this).find('a').attr('data-path');
        renderFile(path);
        return updateState(path);
      });
    };
    window.saveFileHandler = function() {
      return $('.save').click(function(e) {
        var path, val;
        path = goose.currentPath;
        if (path) {
          val = $('#preview input').val();
          return goose.writeFile(path, val, function(file) {
            return renderFile(file);
          });
        }
      });
    };
    window.createFileHandler = function() {
      return $('.new_file').click(function(e) {
        var path;
        e.preventDefault();
        path = prompt('What do you want to name this file?');
        return goose.writeFile(path, '', function(file) {
          return load(location.href);
        });
      });
    };
    window.createFolderHandler = function() {
      return $('.new_folder').click(function(e) {
        var path;
        e.preventDefault();
        path = prompt('What do you want to call this folder?');
        return goose.createFolder(path, function(file) {
          return load(location.href);
        });
      });
    };
    window.breadcrumbHandler = function() {
      return $('li.crumb').click(function(e) {
        var path;
        path = $(this).attr('data-path');
        if (path === '/') {
          return load("" + location.host + "/");
        } else {
          return load("" + location.host + "/?path=" + (encodeURI(path)));
        }
      });
    };
    window.updateState = function(path) {
      var breadcrumb, crumb, i, state, _i, _len, _ref;
      if (path === '') {
        $('#breadcrumb').html('<ul><li class="crumb" data-path="/">Goose</li></ul>');
        state = location.pathname;
        return history.replaceState(state, state, state);
      } else {
        state = "" + location.pathname + "?path=" + path;
        history.replaceState(state, state, state);
        breadcrumb = ['<li class="crumb" data-path="/">Goose</li>'];
        _ref = path.split('/');
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          crumb = _ref[i];
          breadcrumb.push("<li class=\"crumb\" data-path=\"" + (path.split('/').slice(0, i + 1).join('/')) + "\">" + crumb + "</li>");
        }
        return $("#breadcrumb").html("<ul>" + (breadcrumb.join('')) + "</ul>");
      }
    };
    window.renderFolder = function(folder) {
      return goose.readDir(folder, function(files) {
        var file, fileNames, path, readme, _i, _len;
        fileNames = [];
        readme = null;
        for (_i = 0, _len = files.length; _i < _len; _i++) {
          file = files[_i];
          path = file.path.split(goose.rootDir)[1];
          if (file.isFolder) {
            fileNames.push("<li class=\"folder\"><a data-path=\"" + path + "\">" + file.name + "</a></li>");
          } else {
            if (file.name.match(/README\.md$/i)) {
              readme = file.path;
            }
            fileNames.push("<li class=\"file\"><a data-path=\"" + path + "\">" + file.name + "</a></li>");
          }
        }
        $('.nav_col').html("<ul>" + (fileNames.join('')) + "</ul>");
        $('#content').html('<p></p>');
        if (readme) {
          renderFile(goose.relativeDir(readme));
        }
        if (readme) {
          updateState(goose.relativeDir(readme));
        }
        return loadClickHandlers();
      });
    };
    window.renderFile = function(file) {
      return goose.readFile(file, function(content) {
        var val;
        if (goose.currentPath().match(/\.md$/)) {
          val = emojify(markdown.toHTML(content));
        } else {
          val = $('<div/>').text(content).html();
        }
        $('#content p').html(val);
        return loadClickHandlers();
      });
    };
    window.load = function(fullpath) {
      var href, path, query_params;
      href = decodeURI(fullpath.substring(0, fullpath.length));
      query_params = href.split('?')[1];
      if (query_params) {
        path = query_params.match(/path=([^\/#&]+)/)[1];
      } else {
        path = '/';
      }
      return goose.stat(path, function(file) {
        var folderPath, pathParts;
        if (file.isFolder) {
          folderPath = goose.relativeDir(file.path);
          renderFolder(folderPath);
          return updateState(folderPath);
        } else {
          pathParts = goose.relativeDir(file.path).split(/\/+/);
          folderPath = pathParts.slice(0, pathParts.length - 1).join('/');
          renderFolder(folderPath);
          renderFile(pathParts.join('/'));
          return updateState(pathParts.join('/'));
        }
      });
    };
    load(location.href);
    createFolderHandler();
    return createFileHandler();
  });

}).call(this);
